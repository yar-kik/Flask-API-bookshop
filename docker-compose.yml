version: '3'

services:
    api:
        build:
            context: ./backend
            dockerfile: Dockerfile
        ports:
            - "5000:5000"
#        command: python -m gunicorn --workers 3 --bind 0.0.0.0:5000 manage:app
        command: python manage.py runserver -h 0.0.0.0 -p 5000
        environment:
            - CACHE_REDIS_URL=redis://redis:6379
            - PROD_DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
            - ELASTICSEARCH_URL=http://elasticsearch:9200
            - CELERY_BROKER_URL=redis://redis:6379
            - CELERY_RESULT_BACKEND=redis://redis:6379
        volumes:
            - ./backend:/api
        depends_on:
            - db
            - redis
            - elasticsearch

    db:
        image: postgres
        environment:
            - POSTGRES_DB=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
        ports:
            - "5432:5432"
        volumes:
            - ./backend/database:/api/database

    worker:
        build:
            context: ./backend
            dockerfile: Dockerfile
        command: celery --app=celery_worker.celery worker --loglevel=info
        volumes:
            - ./backend:/api
        environment:
            - FLASK_DEBUG=1
            - APP_SETTINGS=config.DevelopmentConfig
            - CELERY_BROKER_URL=redis://redis:6379
            - CELERY_RESULT_BACKEND=redis://redis:6379
        depends_on:
            - api
            - redis

    migration:
        build:
            context: ./backend
            dockerfile: Dockerfile
        command: python manage.py db upgrade
        volumes:
            - ./backend:/api
        depends_on:
            - api
            - db

    redis:
        image: redis
        ports:
            - "6379:6379"

    elasticsearch:
        image: elasticsearch:7.5.2
        ports:
            - "9200:9200"
        environment:
            - xpack.security.enabled=false
            - discovery.type=single-node
        volumes:
            - ./backend/elasticsearch:/api/elasticsearch


    client:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        ports:
            - "3000:3000"
        environment:
            CHOKIDAR_USEPOLLING: "true"
        volumes:
            - ./frontend:/client
        depends_on:
            - api